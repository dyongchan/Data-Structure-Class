import queue


순차적 자료구조 (배열 및 스택)

1. 배열,리스트 : index로 임의의 원소로 접근가능
A List = A[0], A[1] ...

- 연산자 [] : 예시) A[2] : -1 # O(1) 상수시간내의 연산 시간
- 삽입 (append, insert) 
- 삭제 (pop, remove)
# append, pop : 맨뒤의 값의 추가, 삭제 : O(1) 상수시간내의 연산 시간
#  insert, remove : 중간이나 특정 위치의 값 삽입 및 삭제 - 이동의 연산이 필요하기 때문에 O(n)

2. 스택(stack), queue(큐), dequeue(디큐)
- 제한된 접근 (삽입, 삭제)만 허용

stack : LIFO (Last In First Out) # 가장 늦은 자료가 먼저 나간다
# 자료의 가장 아래부터 차례대로 inset 된다 (차곡차곡 쌓인다)
push : insert가 밑에서 부터 차례로 쌓이는 것
pop : 삭제는 맨 위부터 삭제 가능

queue : Fisrt In First Out # 선착순
# 먼저 들어온 자료가 먼저 나간다

dequeue : stack + queue
# 모든 삽입과 삭제를 모두 허용함

3. Linked List (연결리스트) # python의 list와는 다른개념
: 어떤값들이 연결되어 있는 list # 연속되지 않는 메모리 공간에 독립적으로 존재
- 어떠한 값이 도출 된 후 다음에 저장될 값을 표현함 # 각각의 값은 주소 및 다음값에 대한 주소가 함께 있다.
- 마지막 값 후의 주소 값 : C - NULL / Python : None
- index로 접근 불가

python의 list(리스트)

A = [2,4,0,5] (2,4,0,5) # 각각의 객체로 존재
A[0] = 2를 가리키는 주소값을 통해 2를 리턴함
A[1] = 4를 가리키는 주소값을 통해 4를 리턴함
A[2] ...

A[1] = A[1] + 1 : 4를가리키는 주소값에서 5를가리키는 주소값으로 변경 (5의 객체화)

A.append(6) : 맨 뒤에 6을 삽입
A.POP() : 맨뒤의 값을 지우고 리턴
A.pop(1) : A[1]을 제거하고 리턴
A.insert(1,10) : A[1]에 10을 삽입 # 기존값(주소)들은 하나씩 오른쪽으로 민다
A.remove(value) : A에서 Value 제거 # 기존값(주소)들이 하나씩 왼쪽으로 붙어야함
A.index(value) : A의 value 값에 해당하는 index 리턴
A.count(value) : value 값들을 쭉 살펴보며 해당 value가 몇변 등장하는지 세어줌
# 기본적으로 Python List에서 제공하는 삽입 및 삭제 기능
A[1]에 해당되는 4를 가리키는 주소값 제거 후 오른쪽 주소값들을 당겨옴

A[0] = 2를 가리키는 주소값을 통해 2를 리턴함
A[1] = 4를 가리키는 주소값에서 0을 가리키는 주소값으로 변경
A[2] = 0를 가리키는 주소값에서 5를 가리키는 주소값으로 변경


